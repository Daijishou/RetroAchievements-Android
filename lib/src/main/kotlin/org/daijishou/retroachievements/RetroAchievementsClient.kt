/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 * This library follows https://github.com/RetroAchievements/api-js as paradigm.
 * RetroAchievements API: https://api-docs.retroachievements.org/
 * */

package org.daijishou.retroachievements

import kotlinx.coroutines.suspendCancellableCoroutine
import okhttp3.Call
import okhttp3.OkHttpClient
import okhttp3.Request
import okhttp3.Response
import org.daijishou.retroachievements.utils.AuthObject
import org.daijishou.retroachievements.utils.ContinuationCallback
import org.daijishou.retroachievements.utils.buildRequestUrl

class RetroAchievementsClient {
    companion object {
        val API_BASE_URL = "https://retroachievements.org/API";
    }
    private val httpClient = OkHttpClient()
    private var authObject: AuthObject? = null
    fun someLibraryMethod(): Boolean {
        return true
    }

    internal suspend inline fun Call.await(): Response {
        return suspendCancellableCoroutine { continuation ->
            val callback = ContinuationCallback(this, continuation)
            enqueue(callback)
            continuation.invokeOnCancellation(callback)
        }
    }

    fun setAuthorization(userName: String, webApiKey: String) {
        authObject = AuthObject(userName, webApiKey)
    }

    // *** Users ***
    // Get a list of achievements earned by a user between two dates.
    suspend fun getAchievementsEarnedBetween() {
//        buildRequestUrl()
        val request = Request.Builder()
                .url("http://publicobject.com/helloworld.txt")
                .build()
        val result = httpClient.newCall(request).await()
    }
    // Get a list of achievements earned by a user on a given date.
    fun getAchievementsEarnedOnDay() {

    }
    // Get metadata about a game as well as a user's progress on that game.
    fun getGameInfoAndUserProgress() {

    }
    // Get a list of a user's site awards/badges.
    fun getUserAwards() {

    }
    // Get a list of set claims made over the lifetime of a user.
    fun getUserClaims() {
        
    }
    // Get hardcore and softcore completion metadata about games a user has played.
    fun getUserCompletedGames() {

    }
    // Get metadata about how a user has performed on a given game.
    fun getUserGameRankAndScore() {

    }
    // Get a user's total hardcore and softcore points.
    fun getUserPoints() {

    }
    // Get a user's progress on a list of specified games.
    fun getUserProgress() {

    }
    // Get a list of achievements recently earned by the user.
    fun getUserRecentAchievements() {

    }
    // Get a list of games a user has recently played.
    fun getUserRecentlyPlayedGames() {

    }
    // Get a user's exhaustive profile metadata.
    fun getUserSummary() {

    }
    // Get a thin subset of a user's profile metadata.
    fun getUserProfile() {

    }
    
    // *** Games ***
    // Get the list of achievement IDs for a game.
    fun getAchievementCount() {

    }
    // Get how many players have unlocked how many achievements for a game.
    fun getAchievementDistribution() {

    }
    // Get basic metadata about a game.
    fun getGame() {

    }
    // Get extended metadata about a game.
    fun getGameExtended() {

    }
    // Get a list of either the latest masters or highest points earners for a game.
    fun getGameRankAndScore() {

    }
    // Get how users have rated a game.
    fun getGameRating() {

    }

    // *** Achievements ***
    // Get a list of users who have earned an achievement.
    fun getAchievementUnlocks() {

    }

    // *** Consoles ***
    // Get the complete list of console ID and name pairs on the site.
    fun getConsoleIds() {

    }
    // Get the complete list of games for a console.
    fun getGameList() {

    }

    // *** Feed ***
    // Get comprehensive metadata about the current Achievement of the Week.
    fun getAchievementOfTheWeek() {

    }
    // Get all active set claims on the site.
    fun getActiveClaims() {

    }
    // Get all claims of other kinds on the site.
    fun getClaims() {

    }
    // Get the list of top ten points earners.
    fun getTopTenUsers() {

    }
}





































